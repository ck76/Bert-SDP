
(venv) (base) test@tesutonoMacBook-Pro Bert-Chinese-Text-Classification-Pytorch % python3 run.py --model bert
Loading data...
22it [00:00, 7774.43it/s]
22it [00:00, 10510.84it/s]
16it [00:00, 9779.78it/s]
Time usage: 0:00:00
Epoch [1/1]
0-------------(tensor([[ 101,  704, 1290, 1957, 2094, 2110, 7368, 8038, 3315, 4906, 2231, 3613,
          788,  122,  683,  689, 2875, 4511, 4495,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  697, 1921,  817, 5381, 4991, 5520, 1400, 7028, 7028, 6837, 7443,
         8038,  976,  702, 5381, 4991, 4955, 4994, 6206, 1914, 2208, 7178,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  691,  126, 4384, 3862, 3478, 1062, 4852, 9111,  118, 9845, 2398,
          123, 2233, 1114, 4385, 2791, 8327, 2835,  831, 2669,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 1305,  877, 5384, 8038, 1440, 6401,  872, 2548, 1744, 5558, 4495,
         4338, 4638, 1333, 1728,  679, 2361, 3307, 5739, 2548, 2773, 6677, 4157,
         4413,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 8460, 2259, 5439, 1922,  711, 2110, 4495,  976, 7649, 2812, 1765,
         8252, 2399, 5815, 2956, 3949, 1920, 5783, 6289, 7368, 1894,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 6381, 5442, 1726, 6393, 1765, 7448,  704, 1377,  727, 4511, 2111,
         8038, 2199, 1358, 6913, 6626, 5401, 1744, 1346, 6225,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 1101, 2548,  840, 2528, 5735, 7392, 4958,  837, 2658, 7949, 6371,
         1071, 3221, 1957, 1351,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  837, 6958, 3253, 3253, 3617, 5862, 2787, 7676, 3949, 2773,  840,
         3142, 1952, 6817, 6163,  934, 1166, 1863, 2496, 2042, 2791,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  517, 6619, 1880, 8972,  518, 3122, 1814, 2773, 6436,  908, 2773,
         4799, 4170, 1348, 6629,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  100, 2797, 3322, 7178, 1259,  100,  778, 4685, 4906, 1300,  833,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0]]), tensor([19, 23, 21, 25, 22, 21, 16, 22, 16, 12]), tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]]))!tensor([3, 4, 1, 7, 5, 5, 9, 1, 8, 4])
/Users/test/Downloads/Bert-Chinese-Text-Classification-Pytorch/pytorch_pretrained/optimization.py:275: UserWarning: This overload of add_ is deprecated:
        add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
        add_(Tensor other, *, Number alpha) (Triggered internally at  /Users/runner/work/pytorch/pytorch/pytorch/torch/csrc/utils/python_arg_parser.cpp:1174.)
  next_m.mul_(beta1).add_(1 - beta1, grad)
Iter:      0,  Train Loss:   2.3,  Train Acc: 10.00%,  Val Loss:   2.4,  Val Acc: 15.00%,  Time: 0:00:04 *
1-------------(tensor([[ 101,  677, 3862, 8166,  677, 1288, 2399, 1724, 1063, 5277, 5440, 6407,
         2845, 1399,  125, 3299,  129, 3189, 1184, 2130, 2768,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 3330, 3719, 3797, 4917, 3330, 2134,  836, 7410, 7349, 3360,  710,
         1357, 5526, 6851, 7463, 6468, 3331, 5710, 3300, 3307, 1139, 2773,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  124, 2259, 1957, 4997,  678,  860, 5273, 5514, 5632, 4917, 6158,
         2405, 1036, 1736, 5439, 2360, 4500, 2223, 2094, 2927,  839,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 7032, 6395, 7560, 7309, 8038, 6814, 2255, 6756, 6121, 2658, 2692,
         1456, 4708,  784,  720,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 6443, 3160, 1765, 4374, 1963, 3634, 5994,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  517, 1045, 4384,  126,  518, 8529, 3786, 7463,  153, 8620, 8722,
         4276, 1126, 3187, 2647, 2573,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 3862, 3895, 1277, 7566, 4899, 3173, 4795, 6484, 2160, 3250, 1920,
         2125, 7564, 6369, 8108, 3299, 2419, 2458, 4669,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 3395, 2562, 1787, 8038, 1759, 1765,  897, 2418, 7030,  679, 3171,
          794, 5165, 1765,  817, 7410, 4385, 8155, 3717, 2398,  113, 1745,  114,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  823, 6809,  837, 6432, 9599, 8521, 8314,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  676, 5468,  741, 2421, 2456, 6629,  741, 7676, 2350,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0]]), tensor([21, 23, 22, 16,  8, 17, 20, 24,  8, 10]), tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]]))!tensor([3, 7, 5, 2, 1, 8, 1, 1, 8, 4])
Traceback (most recent call last):
  File "run.py", line 37, in <module>
    train(config, model, train_iter, dev_iter, test_iter)
  File "/Users/test/Downloads/Bert-Chinese-Text-Classification-Pytorch/train_eval.py", line 84, in train
    test(config, model, test_iter)
  File "/Users/test/Downloads/Bert-Chinese-Text-Classification-Pytorch/train_eval.py", line 92, in test
    test_acc, test_loss, test_report, test_confusion = evaluate(config, model, test_iter, test=True)
  File "/Users/test/Downloads/Bert-Chinese-Text-Classification-Pytorch/train_eval.py", line 120, in evaluate
    report = metrics.classification_report(labels_all, predict_all, target_names=config.class_list, digits=4)
  File "/Users/test/Downloads/Keio-Takada-Lab-Zemi/SDP/GH-LSTMs/venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py", line 2154, in classification_report
    raise ValueError(
ValueError: Number of classes, 4, does not match size of target_names, 10. Try specifying the labels parameter
(venv) (base) test@tesutonoMacBook-Pro Bert-Chinese-Text-Classification-Pytorch % python3 run.py --model bert
Loading data...
22it [00:00, 8374.14it/s]
22it [00:00, 9760.39it/s]
16it [00:00, 9827.04it/s]
Time usage: 0:00:00
Epoch [1/1]
0-------------(tensor([[ 101,  704, 1290, 1957, 2094, 2110, 7368, 8038, 3315, 4906, 2231, 3613,
          788,  122,  683,  689, 2875, 4511, 4495,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  697, 1921,  817, 5381, 4991, 5520, 1400, 7028, 7028, 6837, 7443,
         8038,  976,  702, 5381, 4991, 4955, 4994, 6206, 1914, 2208, 7178,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  691,  126, 4384, 3862, 3478, 1062, 4852, 9111,  118, 9845, 2398,
          123, 2233, 1114, 4385, 2791, 8327, 2835,  831, 2669,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 1305,  877, 5384, 8038, 1440, 6401,  872, 2548, 1744, 5558, 4495,
         4338, 4638, 1333, 1728,  679, 2361, 3307, 5739, 2548, 2773, 6677, 4157,
         4413,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 8460, 2259, 5439, 1922,  711, 2110, 4495,  976, 7649, 2812, 1765,
         8252, 2399, 5815, 2956, 3949, 1920, 5783, 6289, 7368, 1894,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 6381, 5442, 1726, 6393, 1765, 7448,  704, 1377,  727, 4511, 2111,
         8038, 2199, 1358, 6913, 6626, 5401, 1744, 1346, 6225,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 1101, 2548,  840, 2528, 5735, 7392, 4958,  837, 2658, 7949, 6371,
         1071, 3221, 1957, 1351,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  837, 6958, 3253, 3253, 3617, 5862, 2787, 7676, 3949, 2773,  840,
         3142, 1952, 6817, 6163,  934, 1166, 1863, 2496, 2042, 2791,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  517, 6619, 1880, 8972,  518, 3122, 1814, 2773, 6436,  908, 2773,
         4799, 4170, 1348, 6629,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  100, 2797, 3322, 7178, 1259,  100,  778, 4685, 4906, 1300,  833,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0]]), tensor([19, 23, 21, 25, 22, 21, 16, 22, 16, 12]), tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]]))!tensor([3, 4, 1, 7, 5, 5, 9, 1, 8, 4])
/Users/test/Downloads/Bert-Chinese-Text-Classification-Pytorch/pytorch_pretrained/optimization.py:275: UserWarning: This overload of add_ is deprecated:
        add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
        add_(Tensor other, *, Number alpha) (Triggered internally at  /Users/runner/work/pytorch/pytorch/pytorch/torch/csrc/utils/python_arg_parser.cpp:1174.)
  next_m.mul_(beta1).add_(1 - beta1, grad)
Iter:      0,  Train Loss:   2.3,  Train Acc: 10.00%,  Val Loss:   2.4,  Val Acc: 15.00%,  Time: 0:00:05 *
1-------------(tensor([[ 101,  677, 3862, 8166,  677, 1288, 2399, 1724, 1063, 5277, 5440, 6407,
         2845, 1399,  125, 3299,  129, 3189, 1184, 2130, 2768,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 3330, 3719, 3797, 4917, 3330, 2134,  836, 7410, 7349, 3360,  710,
         1357, 5526, 6851, 7463, 6468, 3331, 5710, 3300, 3307, 1139, 2773,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  124, 2259, 1957, 4997,  678,  860, 5273, 5514, 5632, 4917, 6158,
         2405, 1036, 1736, 5439, 2360, 4500, 2223, 2094, 2927,  839,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 7032, 6395, 7560, 7309, 8038, 6814, 2255, 6756, 6121, 2658, 2692,
         1456, 4708,  784,  720,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 6443, 3160, 1765, 4374, 1963, 3634, 5994,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  517, 1045, 4384,  126,  518, 8529, 3786, 7463,  153, 8620, 8722,
         4276, 1126, 3187, 2647, 2573,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 3862, 3895, 1277, 7566, 4899, 3173, 4795, 6484, 2160, 3250, 1920,
         2125, 7564, 6369, 8108, 3299, 2419, 2458, 4669,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101, 3395, 2562, 1787, 8038, 1759, 1765,  897, 2418, 7030,  679, 3171,
          794, 5165, 1765,  817, 7410, 4385, 8155, 3717, 2398,  113, 1745,  114,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  823, 6809,  837, 6432, 9599, 8521, 8314,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0],
        [ 101,  676, 5468,  741, 2421, 2456, 6629,  741, 7676, 2350,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0]]), tensor([21, 23, 22, 16,  8, 17, 20, 24,  8, 10]), tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]]))!tensor([3, 7, 5, 2, 1, 8, 1, 1, 8, 4])
/Users/test/Downloads/Keio-Takada-Lab-Zemi/SDP/GH-LSTMs/venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/Users/test/Downloads/Keio-Takada-Lab-Zemi/SDP/GH-LSTMs/venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/Users/test/Downloads/Keio-Takada-Lab-Zemi/SDP/GH-LSTMs/venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
Test Loss:   2.4,  Test Acc: 10.00%
Precision, Recall and F1-Score...
               precision    recall  f1-score   support

      finance     0.0000    0.0000    0.0000         1
       realty     0.0000    0.0000    0.0000         1
       stocks     0.0000    0.0000    0.0000         1
    education     0.0000    0.0000    0.0000         1
      science     0.0000    0.0000    0.0000         1
      society     0.1250    1.0000    0.2222         1
     politics     0.0000    0.0000    0.0000         1
       sports     0.0000    0.0000    0.0000         1
         game     0.0000    0.0000    0.0000         1
entertainment     0.0000    0.0000    0.0000         1

     accuracy                         0.1000        10
    macro avg     0.0125    0.1000    0.0222        10
 weighted avg     0.0125    0.1000    0.0222        10

Confusion Matrix...
[[0 0 0 0 0 1 0 0 0 0]
 [1 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 1 0 0 0 0]
 [0 0 0 0 0 1 0 0 0 0]
 [0 0 0 0 0 1 0 0 0 0]
 [0 0 0 0 0 1 0 0 0 0]
 [1 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 1 0 0 0 0]
 [0 0 0 0 0 1 0 0 0 0]
 [0 0 0 0 0 1 0 0 0 0]]
Time usage: 0:00:01
(venv) (base) test@tesutonoMacBook-Pro Bert-Chinese-Text-Classification-Pytorch %
