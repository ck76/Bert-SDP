"C:\Users\Takada Lab\Documents\GitHub\Bert-SDP\venv\Scripts\python.exe" "C:\Users\Takada Lab\Documents\GitHub\Bert-SDP\run.py"
bert_CNN_BiLSTM_Without_Com_squeeze
0it [00:00, ?it/s]Loading data...
1406it [00:07, 186.55it/s]
330it [00:01, 181.51it/s]
339it [00:01, 280.19it/s]
Time usage: 0:00:11
Model(
  (bert): BertModel(
    (embeddings): BertEmbeddings(
      (word_embeddings): Embedding(30522, 768, padding_idx=0)
      (position_embeddings): Embedding(512, 768)
      (token_type_embeddings): Embedding(2, 768)
      (LayerNorm): BertLayerNorm()
      (dropout): Dropout(p=0.1, inplace=False)
    )
    (encoder): BertEncoder(
      (layer): ModuleList(
        (0): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (1): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (2): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (3): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (4): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (5): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (6): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (7): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (8): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (9): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (10): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (11): BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): BertLayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): BertLayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
    )
    (pooler): BertPooler(
      (dense): Linear(in_features=768, out_features=768, bias=True)
      (activation): Tanh()
    )
  )
  (conv1): Conv2d(1, 1, kernel_size=(5, 5), stride=(1, 1))
  (lstm): LSTM(764, 64, num_layers=2, batch_first=True, dropout=0.01, bidirectional=True)
  (convs): ModuleList(
    (0): Conv2d(1, 512, kernel_size=(5, 768), stride=(1, 1))
    (1): Conv2d(1, 512, kernel_size=(5, 768), stride=(1, 1))
  )
  (dropout): Dropout(p=0.01, inplace=False)
  (fc_cnn): Linear(in_features=128, out_features=2, bias=True)
  (maxpool): MaxPool1d(kernel_size=508, stride=508, padding=0, dilation=1, ceil_mode=False)
)
Epoch [1/3]
0-------22
hhhhh
(tensor([[  101,  7305,  8916,  ..., 10294, 21017,  1197],
        [  101,  7305,  8916,  ...,   114,   119,  4971],
        [  101,  7305,  8916,  ...,     0,     0,     0],
        ...,
        [  101,  7305,  8916,  ...,  2320,   134,  6014],
        [  101,  7305,  8916,  ...,     0,     0,     0],
        [  101,  7305,  8916,  ...,  1197,  1449,  1643]], device='cuda:0'), tensor([512, 512, 144, 512, 512, 512, 319, 268, 198, 512, 512, 387, 512, 512,
        512, 420, 140, 512, 309, 471, 512, 512,  97, 479,  31, 512, 512, 512,
        512, 512, 123, 512, 376, 512, 512, 512, 144, 512, 231, 512,  34, 512,
        220, 512, 320, 512, 292, 512, 512,  45, 147, 251, 252, 359,  74, 512,
        512,  90, 512, 512, 144, 512, 235, 512], device='cuda:0'), tensor([[1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 0, 0, 0],
        ...,
        [1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 1, 1, 1]], device='cuda:0'))
hhhhh-0:torch.Size([64, 512])
tensor([[  101,  7305,  8916,  ..., 10294, 21017,  1197],
        [  101,  7305,  8916,  ...,   114,   119,  4971],
        [  101,  7305,  8916,  ...,     0,     0,     0],
        ...,
        [  101,  7305,  8916,  ...,  2320,   134,  6014],
        [  101,  7305,  8916,  ...,     0,     0,     0],
        [  101,  7305,  8916,  ...,  1197,  1449,  1643]], device='cuda:0')
hhhhh-1:torch.Size([64])
tensor([512, 512, 144, 512, 512, 512, 319, 268, 198, 512, 512, 387, 512, 512,
        512, 420, 140, 512, 309, 471, 512, 512,  97, 479,  31, 512, 512, 512,
        512, 512, 123, 512, 376, 512, 512, 512, 144, 512, 231, 512,  34, 512,
        220, 512, 320, 512, 292, 512, 512,  45, 147, 251, 252, 359,  74, 512,
        512,  90, 512, 512, 144, 512, 235, 512], device='cuda:0')
hhhhh-2:torch.Size([64, 512])
tensor([[1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 0, 0, 0],
        ...,
        [1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 1, 1, 1]], device='cuda:0')
hhhhh-labels:torch.Size([64])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], device='cuda:0')
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
C:\Users\Takada Lab\Documents\GitHub\Bert-SDP\pytorch_pretrained\optimization.py:275: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at C:\actions-runner\_work\pytorch\pytorch\builder\windows\pytorch\torch\csrc\utils\python_arg_parser.cpp:1420.)
  next_m.mul_(beta1).add_(1 - beta1, grad)
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Iter:      0,  Train Loss:   0.7,  Train Acc: 50.00%,  Val Loss:   0.7,  Val Acc: 50.00%,  Time: 0:00:09 *
1-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Iter:      1,  Train Loss:   0.7,  Train Acc: 50.00%,  Val Loss:  0.69,  Val Acc: 50.00%,  Time: 0:00:18 *
2-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1
 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Iter:      2,  Train Loss:   0.7,  Train Acc: 50.00%,  Val Loss:  0.69,  Val Acc: 52.19%,  Time: 0:00:27 *
3-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1
 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Iter:      3,  Train Loss:  0.69,  Train Acc: 50.00%,  Val Loss:  0.69,  Val Acc: 51.56%,  Time: 0:00:34
4-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 1 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 0 0
 0 0 0 0 0 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 1
 0 1 0 0 1 0 0 0 0 1 1 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 0 1 0 1 0 0 1
 1 0 0 1 0 0 0 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 0 0
 1 1 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 1 1 0 1 1 0 1 0 1 1 0
 1 1 0 0 0 1 1 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 0
 1 0 1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 0 0 0 0
 0 1 1 1 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1
 0 1 0 0 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 0 0 1]
Iter:      4,  Train Loss:  0.67,  Train Acc: 50.00%,  Val Loss:  0.67,  Val Acc: 56.88%,  Time: 0:00:43 *
5-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 0 0
 0 0 0 0 0 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 0
 0 1 0 0 1 0 0 0 0 1 1 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 0 1 0 1 0 0 1
 1 0 0 1 0 0 0 1 0 0 1 0 0 1 1 0 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 0 1 1 1 0 0
 1 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0
 0 1 0 0 0 1 0 0 0 0 1 1 1 1 0 0 0 0 1 0 0 1 1 1 1 0 0 0 0 1 0 0 1 1 1 1 0
 0 0 1 0 0 1 0 1 0 1 1 1 1 1 0 0 1 1 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 0 0 0 0
 0 1 1 1 0 1 0 0 0 0 1 0 1 0 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 0 1 1
 0 1 0 0 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 0 0 1]
Iter:      5,  Train Loss:  0.64,  Train Acc: 67.19%,  Val Loss:  0.68,  Val Acc: 58.13%,  Time: 0:00:51
6-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,
        0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 0 0
 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 0 1 0 1 0 0 0
 1 0 0 1 0 0 0 1 0 0 1 0 0 1 1 0 1 0 1 0 1 0 0 1 0 0 1 1 0 0 0 0 1 0 1 0 0
 1 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0
 0 1 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 0 0 1 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 0 1 1
 0 1 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:      6,  Train Loss:  0.67,  Train Acc: 57.81%,  Val Loss:  0.68,  Val Acc: 61.88%,  Time: 0:00:59
7-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 1 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 1 1 0 1 0 0 1 1 0 0 0
 0 0 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 1
 0 1 0 1 1 0 0 0 0 1 1 0 0 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 0 1 0 0 1
 1 0 0 1 0 0 0 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 0 0
 1 1 0 1 1 1 1 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 0
 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 0
 1 0 1 0 0 1 0 1 0 1 1 1 1 1 0 0 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 0 0 0
 0 1 1 1 0 1 1 0 0 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1
 0 1 0 0 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 0 0 1]
Iter:      7,  Train Loss:  0.68,  Train Acc: 62.50%,  Val Loss:  0.66,  Val Acc: 58.44%,  Time: 0:01:07 *
8-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,
        0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1,
        1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 1 0 0 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 0
 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 0 1 1 0 0 0 1
 1 1 0 1 1 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0 1
 1 0 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0
 1 1 0 1 1 1 1 0 1 0 1 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0
 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0
 1 0 1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 0
 0 1 1 1 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1
 0 1 0 0 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 1 0 1]
Iter:      8,  Train Loss:   0.6,  Train Acc: 67.19%,  Val Loss:  0.66,  Val Acc: 60.31%,  Time: 0:01:15
9-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,
        1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 1 1 0 0 0
 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 1 1 1 1 0 0 0 0 0 0 1 0 1 0 1 0 0 0
 1 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0
 0 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 1 0 0 0 0
 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 1
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:      9,  Train Loss:  0.62,  Train Acc: 67.19%,  Val Loss:  0.64,  Val Acc: 67.19%,  Time: 0:01:24 *
10-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 1 1 0 0 0
 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0
 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 1 0 0 0
 1 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0
 0 0 0 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     10,  Train Loss:  0.53,  Train Acc: 75.00%,  Val Loss:  0.64,  Val Acc: 66.25%,  Time: 0:01:34 *
11-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
        1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 1 0 0 0 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 0 0 1 1 0 1 0
 0 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 0 0 1 0 0 0 1
 0 1 0 0 1 0 0 0 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 1 0 1 1 1 1 0 0
 1 1 0 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 0
 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 0 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1 0 0 0 0
 0 1 1 1 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1
 0 1 0 0 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 0 0 1]
Iter:     11,  Train Loss:  0.66,  Train Acc: 62.50%,  Val Loss:  0.62,  Val Acc: 65.00%,  Time: 0:01:43 *
12-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,
        1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1,
        0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0
 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 0 0 1 1
 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0 1
 1 0 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0
 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0
 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0
 1 0 1 0 0 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 0
 0 1 1 1 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1
 0 1 0 0 1 1 1 1 0 0 1 0 0 0 1 1 0 1 0 1 1 1 0 1]
Iter:     12,  Train Loss:  0.56,  Train Acc: 71.88%,  Val Loss:  0.63,  Val Acc: 62.81%,  Time: 0:01:51
13-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1,
        1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 1 1 0 1 0 0 0 0 1 1 0 1 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 0 1 0 0 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 0 0 0 0 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 1 0 0 1 0 0 0 1 0 1 1 0 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1]
Iter:     13,  Train Loss:  0.52,  Train Acc: 73.44%,  Val Loss:   0.6,  Val Acc: 71.25%,  Time: 0:02:00 *
14-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0,
        1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0
 0 0 1 0 0 0 0 1 0 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1
 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 1
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     14,  Train Loss:   0.5,  Train Acc: 75.00%,  Val Loss:  0.63,  Val Acc: 65.00%,  Time: 0:02:08
15-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 0 0 1 1 0 1 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 0 1 0 0 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 0 0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 1 0 0 1 0 0 0 1 0 1 1 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 1
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     15,  Train Loss:  0.48,  Train Acc: 78.12%,  Val Loss:   0.6,  Val Acc: 69.69%,  Time: 0:02:16
16-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1,
        0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0
 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 0 0 0 1 0 1 1 1
 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 0
 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1
 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 1 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1
 0 1 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 1 0 1 0 1 0 1]
Iter:     16,  Train Loss:  0.56,  Train Acc: 70.31%,  Val Loss:  0.61,  Val Acc: 66.88%,  Time: 0:02:24
17-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1,
        1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 0 0 0 0 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 0 1 0
 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 1 1 0 0 0 0 1 1 1 0 1 0 0 0 1 1 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0
 1 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 1 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 1 1 1
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 1]
Iter:     17,  Train Loss:  0.54,  Train Acc: 79.69%,  Val Loss:  0.58,  Val Acc: 72.81%,  Time: 0:02:33 *
18-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0
 0 0 1 0 0 0 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1
 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 1 0 1 0 1 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 0 1 1 0 0
 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 0 0 0 0
 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     18,  Train Loss:  0.56,  Train Acc: 76.56%,  Val Loss:  0.67,  Val Acc: 64.69%,  Time: 0:02:41
19-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0
 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 1 1 0 0
 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0
 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     19,  Train Loss:  0.38,  Train Acc: 84.38%,  Val Loss:  0.71,  Val Acc: 64.06%,  Time: 0:02:49
20-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 1 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 1 1 0 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 1 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     20,  Train Loss:  0.55,  Train Acc: 70.31%,  Val Loss:  0.57,  Val Acc: 73.75%,  Time: 0:02:57 *
21-------22
torch.Size([62, 512, 768])
torch.Size([62, 1, 512, 768])
torch.Size([62, 1, 508, 764])
torch.Size([62, 508, 764])
torch.Size([62, 508, 128])
torch.Size([62, 128, 508])
torch.Size([62, 128, 1])
torch.Size([62, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0
 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 0 0 1 0 1 1 1
 1 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0
 1 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 1
 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1
 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1
 0 1 0 0 1 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 1 1]
Iter:     21,  Train Loss:  0.42,  Train Acc: 82.26%,  Val Loss:  0.61,  Val Acc: 66.88%,  Time: 0:03:05
Epoch [2/3]
0-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
        0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
        1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0
 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 0 0 1 0 1 1 1
 1 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0 0
 1 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 1 1 0 1 0 0 0 1 1 1 1 1 0 1
 1 1 0 1 0 1 1 0 0 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1
 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 1 0 0 1 0 1 0 1 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1
 0 1 0 0 1 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 1 1]
Iter:     22,  Train Loss:  0.57,  Train Acc: 75.00%,  Val Loss:  0.61,  Val Acc: 69.06%,  Time: 0:03:13
1-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 0 0 0 0 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 0 1 0
 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 1 1 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     23,  Train Loss:  0.45,  Train Acc: 76.56%,  Val Loss:  0.56,  Val Acc: 74.69%,  Time: 0:03:22 *
2-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     24,  Train Loss:  0.45,  Train Acc: 79.69%,  Val Loss:   0.6,  Val Acc: 71.56%,  Time: 0:03:30
3-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
        0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0
 0 0 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0
 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     25,  Train Loss:  0.46,  Train Acc: 79.69%,  Val Loss:  0.64,  Val Acc: 66.88%,  Time: 0:03:38
4-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,
        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,
        0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1]
Iter:     26,  Train Loss:  0.37,  Train Acc: 81.25%,  Val Loss:  0.63,  Val Acc: 68.75%,  Time: 0:03:46
5-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 0 1 0 1 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     27,  Train Loss:  0.41,  Train Acc: 76.56%,  Val Loss:   0.6,  Val Acc: 71.88%,  Time: 0:03:55
6-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
        0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,
        0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 1 1 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     28,  Train Loss:  0.36,  Train Acc: 84.38%,  Val Loss:  0.58,  Val Acc: 74.06%,  Time: 0:04:03
7-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1,
        0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 0 0
 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0
 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 1]
Iter:     29,  Train Loss:  0.43,  Train Acc: 79.69%,  Val Loss:  0.56,  Val Acc: 76.25%,  Time: 0:04:11
8-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1,
        0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 0 0 0 0 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 1 0
 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 1]
Iter:     30,  Train Loss:   0.3,  Train Acc: 89.06%,  Val Loss:  0.56,  Val Acc: 76.56%,  Time: 0:04:19 *
9-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1,
        0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[1 1 0 0 0 1 0 0 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 1 0
 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1
 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 1]
Iter:     31,  Train Loss:  0.36,  Train Acc: 87.50%,  Val Loss:  0.57,  Val Acc: 75.94%,  Time: 0:04:27
10-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 0 1 0 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1
 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     32,  Train Loss:  0.21,  Train Acc: 93.75%,  Val Loss:  0.59,  Val Acc: 76.25%,  Time: 0:04:36
11-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1
 0 1 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     33,  Train Loss:  0.31,  Train Acc: 92.19%,  Val Loss:  0.62,  Val Acc: 73.44%,  Time: 0:04:44
12-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 0 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     34,  Train Loss:  0.37,  Train Acc: 79.69%,  Val Loss:  0.64,  Val Acc: 72.19%,  Time: 0:04:52
13-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 1 0 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     35,  Train Loss:  0.28,  Train Acc: 89.06%,  Val Loss:  0.65,  Val Acc: 71.88%,  Time: 0:05:00
14-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     36,  Train Loss:  0.26,  Train Acc: 90.62%,  Val Loss:  0.64,  Val Acc: 73.12%,  Time: 0:05:08
15-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     37,  Train Loss:  0.19,  Train Acc: 95.31%,  Val Loss:  0.64,  Val Acc: 72.81%,  Time: 0:05:16
16-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     38,  Train Loss:  0.29,  Train Acc: 89.06%,  Val Loss:  0.63,  Val Acc: 75.00%,  Time: 0:05:24
17-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0,
        1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 0 0
 1 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     39,  Train Loss:  0.35,  Train Acc: 85.94%,  Val Loss:  0.63,  Val Acc: 75.62%,  Time: 0:05:32
18-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     40,  Train Loss:   0.3,  Train Acc: 87.50%,  Val Loss:  0.66,  Val Acc: 73.75%,  Time: 0:05:40
19-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,
        1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     41,  Train Loss:  0.19,  Train Acc: 95.31%,  Val Loss:  0.72,  Val Acc: 71.56%,  Time: 0:05:48
20-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 0 1 0 1 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1]
Iter:     42,  Train Loss:  0.23,  Train Acc: 90.62%,  Val Loss:  0.77,  Val Acc: 71.25%,  Time: 0:05:56
21-------22
torch.Size([62, 512, 768])
torch.Size([62, 1, 512, 768])
torch.Size([62, 1, 508, 764])
torch.Size([62, 508, 764])
torch.Size([62, 508, 128])
torch.Size([62, 128, 508])
torch.Size([62, 128, 1])
torch.Size([62, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     43,  Train Loss:  0.28,  Train Acc: 85.48%,  Val Loss:  0.71,  Val Acc: 72.50%,  Time: 0:06:04
Epoch [3/3]
0-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0,
        1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     44,  Train Loss:  0.25,  Train Acc: 90.62%,  Val Loss:  0.67,  Val Acc: 73.44%,  Time: 0:06:12
1-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 0
 1 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     45,  Train Loss:  0.17,  Train Acc: 93.75%,  Val Loss:  0.67,  Val Acc: 74.06%,  Time: 0:06:20
2-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 0
 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0
 1 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1
 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     46,  Train Loss:  0.23,  Train Acc: 92.19%,  Val Loss:  0.67,  Val Acc: 73.44%,  Time: 0:06:28
3-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
        0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 0 0
 1 0 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     47,  Train Loss:  0.25,  Train Acc: 92.19%,  Val Loss:   0.7,  Val Acc: 72.81%,  Time: 0:06:37
4-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     48,  Train Loss:  0.14,  Train Acc: 95.31%,  Val Loss:  0.75,  Val Acc: 70.62%,  Time: 0:06:45
5-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     49,  Train Loss:  0.14,  Train Acc: 98.44%,  Val Loss:   0.8,  Val Acc: 69.38%,  Time: 0:06:53
6-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     50,  Train Loss:  0.22,  Train Acc: 92.19%,  Val Loss:  0.81,  Val Acc: 68.75%,  Time: 0:07:01
7-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 0 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     51,  Train Loss:  0.18,  Train Acc: 95.31%,  Val Loss:  0.79,  Val Acc: 69.38%,  Time: 0:07:09
8-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     52,  Train Loss:  0.18,  Train Acc: 92.19%,  Val Loss:  0.74,  Val Acc: 70.94%,  Time: 0:07:17
9-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1,
        0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     53,  Train Loss:  0.18,  Train Acc: 93.75%,  Val Loss:  0.73,  Val Acc: 72.19%,  Time: 0:07:25
10-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     54,  Train Loss: 0.095,  Train Acc: 98.44%,  Val Loss:  0.72,  Val Acc: 72.50%,  Time: 0:07:33
11-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     55,  Train Loss:  0.16,  Train Acc: 96.88%,  Val Loss:  0.73,  Val Acc: 72.50%,  Time: 0:07:41
12-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     56,  Train Loss:  0.18,  Train Acc: 92.19%,  Val Loss:  0.75,  Val Acc: 72.19%,  Time: 0:07:50
13-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     57,  Train Loss:  0.16,  Train Acc: 93.75%,  Val Loss:  0.77,  Val Acc: 71.88%,  Time: 0:07:58
14-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     58,  Train Loss:  0.13,  Train Acc: 96.88%,  Val Loss:   0.8,  Val Acc: 70.94%,  Time: 0:08:06
15-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     59,  Train Loss: 0.088,  Train Acc: 98.44%,  Val Loss:  0.81,  Val Acc: 70.62%,  Time: 0:08:14
16-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     60,  Train Loss:  0.14,  Train Acc: 96.88%,  Val Loss:  0.82,  Val Acc: 70.62%,  Time: 0:08:23
17-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0,
        1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     61,  Train Loss:  0.27,  Train Acc: 92.19%,  Val Loss:  0.82,  Val Acc: 70.62%,  Time: 0:08:32
18-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     62,  Train Loss:  0.17,  Train Acc: 96.88%,  Val Loss:  0.82,  Val Acc: 70.62%,  Time: 0:08:40
19-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     63,  Train Loss:  0.11,  Train Acc: 98.44%,  Val Loss:  0.83,  Val Acc: 70.62%,  Time: 0:08:48
20-------22
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     64,  Train Loss:  0.13,  Train Acc: 98.44%,  Val Loss:  0.83,  Val Acc: 70.62%,  Time: 0:08:56
21-------22
torch.Size([62, 512, 768])
torch.Size([62, 1, 512, 768])
torch.Size([62, 1, 508, 764])
torch.Size([62, 508, 764])
torch.Size([62, 508, 128])
torch.Size([62, 128, 508])
torch.Size([62, 128, 1])
torch.Size([62, 128])
训练集：
tensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
tensor([0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
验证集：
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0
 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0
 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0
 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0
 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0
 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0
 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1]
Iter:     65,  Train Loss:  0.12,  Train Acc: 95.16%,  Val Loss:  0.83,  Val Acc: 70.94%,  Time: 0:09:04
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([64, 512, 768])
torch.Size([64, 1, 512, 768])
torch.Size([64, 1, 508, 764])
torch.Size([64, 508, 764])
torch.Size([64, 508, 128])
torch.Size([64, 128, 508])
torch.Size([64, 128, 1])
torch.Size([64, 128])
torch.Size([19, 512, 768])
torch.Size([19, 1, 512, 768])
torch.Size([19, 1, 508, 764])
torch.Size([19, 508, 764])
torch.Size([19, 508, 128])
torch.Size([19, 128, 508])
torch.Size([19, 128, 1])
torch.Size([19, 128])
验证集：
[0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0]
[0 0 0 1 0 1 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0
 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 1 0
 1 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 1
 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0
 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0
 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0 0 1 1 0
 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1
 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0
 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1
 1 1 0 0 0 1]
Test Loss:  0.58,  Test Acc: 74.34%
Precision, Recall and F1-Score...
              precision    recall  f1-score   support

       clean     0.9838    0.7454    0.8482       326
       buggy     0.0978    0.6923    0.1714        13

    accuracy                         0.7434       339
   macro avg     0.5408    0.7189    0.5098       339
weighted avg     0.9498    0.7434    0.8222       339

Confusion Matrix...
[[243  83]
 [  4   9]]
Time usage: 0:00:07
[W CUDAGuardImpl.h:46] Warning: CUDA warning: driver shutting down (function uncheckedGetDevice)
[W CUDAGuardImpl.h:62] Warning: CUDA warning: driver shutting down (function uncheckedSetDevice)

Process finished with exit code 0
